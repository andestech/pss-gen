/*!
@weakgroup      test
@{
@file
@author         Luther Lee
@data           2023/07/04
@brief          Test integer constants with binary format and assigned to int and bit types.
@version
Portable Test and Stimulus Standard Version 2.0 <br>
> Section 4.6 : Numbers <br>
> Section 8.2 : Numeric types <br>


---------------------------------------------------------------------------------------------------

### Test Command
@code{.unparsed}
make gentarget
@endcode
*/
component pss_top {
    action test_binary_to_int {
        int int_b0 , int_b1 , int_b2 , int_b3 , int_b4 , int_b5 , int_b6 , int_b7 , int_b8 , int_b9 ;
        int int_b10, int_b11, int_b12, int_b13, int_b14, int_b15, int_b16, int_b17, int_b18, int_b19;
        int int_b20, int_b21, int_b22, int_b23, int_b24, int_b25, int_b26, int_b27, int_b28, int_b29;

        exec post_solve {
            // With base specifier but no size constant
            int_b0  =  'b01111111111111111111111111111111       ; //   2**31 - 1                               => 0x7FFFFFFF =>  2147483647
            int_b1  = -'b01111111111111111111111111111111       ; // -(2**31 - 1) => 2's-complement 0x7FFFFFFF => 0x80000001 => -2147483647
            int_b2  =  'b10000000000000000000000000000000       ; //   2**31                                   => 0x80000000 =>  2147483648
            int_b3  = -'b10000000000000000000000000000000       ; // -(2**31)     => 2's-complement 0x80000000 => 0x80000000 => -2147483648
            int_b4  =  'b11111111111111111111111111111111       ; //   2**32 - 1                               => 0xFFFFFFFF => -1
            int_b5  = -'b11111111111111111111111111111111       ; // -(2**32 - 1) => 2's-complement 0xFFFFFFFF => 0x00000001 =>  1
            int_b6  =  'B1011_1110_0001_0011_1011_1010          ; // Support capital 'D' and underscore        => 0x00BE13BA =>  12456890

            // With base specifier but no size constant and with signed designator
            int_b7  =  'sb01111111111111111111111111111111      ; //   2**31 - 1                               => 0x7FFFFFFF =>  2147483647
            int_b8  = -'sb01111111111111111111111111111111      ; // -(2**31 - 1) => 2's-complement 0x7FFFFFFF => 0x80000001 => -2147483647
            int_b9  =  'sb10000000000000000000000000000000      ; //   2**31                                   => 0x80000000 =>  2147483648
            int_b10 = -'sb10000000000000000000000000000000      ; // -(2**31)     => 2's-complement 0x80000000 => 0x80000000 => -2147483648
            int_b11 =  'sb11111111111111111111111111111111      ; //   2**32 - 1                               => 0xFFFFFFFF => -1
            int_b12 = -'sb11111111111111111111111111111111      ; // -(2**32 - 1) => 2's-complement 0xFFFFFFFF => 0x00000001 =>  1
            int_b13 =  'SB1011_1110_0001_0011_1011_1010         ; // Support capital 'S' and underscore        => 0x00BE13BA =>  12456890

            // With 33 bits base specifier
            int_b14 =  33'b011111111111111111111111111111111    ; //   2**32 - 1                                => 0x0FFFFFFFF => 0xFFFFFFFF => -1
            int_b15 = -33'b011111111111111111111111111111111    ; // -(2**32 - 1) => 2's-complement 0x0FFFFFFFF => 0x100000001 => 0x00000001 =>  1
            int_b16 =  33'b100000000000000000000000000000000    ; //   2**32                                    => 0x100000000 => 0x00000000 =>  0
            int_b17 = -33'b100000000000000000000000000000000    ; // -(2**32)     => 2's-complement 0x100000000 => 0x100000000 => 0x00000000 =>  0
            int_b18 =  33'b111111111111111111111111111111111    ; //   2**33 - 1                                => 0x1FFFFFFFF => 0xFFFFFFFF => -1
            int_b19 = -33'b111111111111111111111111111111111    ; // -(2**33 - 1) => 2's-complement 0x1FFFFFFFF => 0x000000001 => 0x00000001 =>  1

            // With 33 bits base specifier and with signed designator
            int_b20 =  33'sb011111111111111111111111111111111   ; //   2**32 - 1                                => 0x0FFFFFFFF => 0xFFFFFFFF => -1
            int_b21 = -33'sb011111111111111111111111111111111   ; // -(2**32 - 1) => 2's-complement 0x0FFFFFFFF => 0x100000001 => 0x00000001 =>  1
            int_b22 =  33'sb100000000000000000000000000000000   ; //   2**32                                    => 0x100000000 => 0x00000000 =>  0
            int_b23 = -33'sb100000000000000000000000000000000   ; // -(2**32)     => 2's-complement 0x100000000 => 0x100000000 => 0x00000000 =>  0
            int_b24 =  33'sb111111111111111111111111111111111   ; //   2**33 - 1                                => 0x1FFFFFFFF => 0xFFFFFFFF => -1
            int_b25 = -33'sb111111111111111111111111111111111   ; // -(2**33 - 1) => 2's-complement 0x1FFFFFFFF => 0x000000001 => 0x00000001 =>  1
        }

        exec body ASM =
"""
int_b0  = {{int_b0}}
int_b1  = {{int_b1}}
int_b2  = {{int_b2}}
int_b3  = {{int_b3}}
int_b4  = {{int_b4}}
int_b5  = {{int_b5}}
int_b6  = {{int_b6}}
int_b7  = {{int_b7}}
int_b8  = {{int_b8}}
int_b9  = {{int_b9}}
int_b10 = {{int_b10}}
int_b11 = {{int_b11}}
int_b12 = {{int_b12}}
int_b13 = {{int_b13}}
int_b14 = {{int_b14}}
int_b15 = {{int_b15}}
int_b16 = {{int_b16}}
int_b17 = {{int_b17}}
int_b18 = {{int_b18}}
int_b19 = {{int_b19}}
int_b20 = {{int_b20}}
int_b21 = {{int_b21}}
int_b22 = {{int_b22}}
int_b23 = {{int_b23}}
int_b24 = {{int_b24}}
int_b25 = {{int_b25}}
""";
    }

    action test_binary_to_byte {
        bit [8] byte_b0  , byte_b1  , byte_b2  , byte_b3  , byte_b4  , byte_b5  , byte_b6  , byte_b7  , byte_b8  , byte_b9 ;
        bit [8] byte_b10 , byte_b11 , byte_b12 , byte_b13 , byte_b14 , byte_b15 , byte_b16 , byte_b17 , byte_b18 , byte_b19;
        bit [8] byte_b20 , byte_b21 , byte_b22 , byte_b23 , byte_b24 , byte_b25 , byte_b26 , byte_b27 , byte_b28 , byte_b29;

        exec post_solve {
            // With base specifier but no size constant
            byte_b0  =  'b01111111111111111111111111111111      ; //   2**31 - 1                               => 0x7FFFFFFF => 0xFF =>  255
            byte_b1  = -'b01111111111111111111111111111111      ; // -(2**31 - 1) => 2's-complement 0x7FFFFFFF => 0x80000001 => 0x01 =>  1
            byte_b2  =  'b10000000000000000000000000000000      ; //   2**31                                   => 0x80000000 => 0x00 =>  0
            byte_b3  = -'b10000000000000000000000000000000      ; // -(2**31)     => 2's-complement 0x80000000 => 0x80000000 => 0x00 =>  0
            byte_b4  =  'b11111111111111111111111111111111      ; //   2**32 - 1                               => 0xFFFFFFFF => 0xFF =>  255
            byte_b5  = -'b11111111111111111111111111111111      ; // -(2**32 - 1) => 2's-complement 0xFFFFFFFF => 0x00000001 => 0x01 =>  1
            byte_b6  =  'B1011_1110_0001_0011_1011_1010         ; // Support capital 'D' and underscore        => 0x00BE13BA => 0xBA =>  186

            // With base specifier but no size constant and with signed designator
            byte_b7  =  'sb01111111111111111111111111111111     ; //   2**31 - 1                               => 0x7FFFFFFF => 0xFF =>  255
            byte_b8  = -'sb01111111111111111111111111111111     ; // -(2**31 - 1) => 2's-complement 0x7FFFFFFF => 0x80000001 => 0x01 =>  1
            byte_b9  =  'sb10000000000000000000000000000000     ; //   2**31                                   => 0x80000000 => 0x00 =>  0
            byte_b10 = -'sb10000000000000000000000000000000     ; // -(2**31)     => 2's-complement 0x80000000 => 0x80000000 => 0x00 =>  0
            byte_b11 =  'sb11111111111111111111111111111111     ; //   2**32 - 1                               => 0xFFFFFFFF => 0xFF =>  255
            byte_b12 = -'sb11111111111111111111111111111111     ; // -(2**32 - 1) => 2's-complement 0xFFFFFFFF => 0x00000001 => 0x01 =>  1
            byte_b13 =  'SB1011_1110_0001_0011_1011_1010        ; // Support capital 'S' and underscore        => 0x00BE13BA => 0xBA =>  186

            // With 33 bits base specifier
            byte_b14 =  33'b011111111111111111111111111111111   ; //   2**32 - 1                                => 0x0FFFFFFFF => 0xFF =>  255
            byte_b15 = -33'b011111111111111111111111111111111   ; // -(2**32 - 1) => 2's-complement 0x0FFFFFFFF => 0x100000001 => 0x01 =>  1
            byte_b16 =  33'b100000000000000000000000000000000   ; //   2**32                                    => 0x100000000 => 0x00 =>  0
            byte_b17 = -33'b100000000000000000000000000000000   ; // -(2**32)     => 2's-complement 0x100000000 => 0x100000000 => 0x00 =>  0
            byte_b18 =  33'b111111111111111111111111111111111   ; //   2**33 - 1                                => 0x1FFFFFFFF => 0xFF =>  255
            byte_b19 = -33'b111111111111111111111111111111111   ; // -(2**33 - 1) => 2's-complement 0x1FFFFFFFF => 0x000000001 => 0x01 =>  1

            // With 33 bits base specifier and with signed designator
            byte_b20 =  33'sb011111111111111111111111111111111  ; //   2**32 - 1                                => 0x0FFFFFFFF => 0xFF =>  255
            byte_b21 = -33'sb011111111111111111111111111111111  ; // -(2**32 - 1) => 2's-complement 0x0FFFFFFFF => 0x100000001 => 0x01 =>  1
            byte_b22 =  33'sb100000000000000000000000000000000  ; //   2**32                                    => 0x100000000 => 0x00 =>  0
            byte_b23 = -33'sb100000000000000000000000000000000  ; // -(2**32)     => 2's-complement 0x100000000 => 0x100000000 => 0x00 =>  0
            byte_b24 =  33'sb111111111111111111111111111111111  ; //   2**33 - 1                                => 0x1FFFFFFFF => 0xFF =>  255
            byte_b25 = -33'sb111111111111111111111111111111111  ; // -(2**33 - 1) => 2's-complement 0x1FFFFFFFF => 0x000000001 => 0x01 =>  1
        }

        exec body ASM =
"""
byte_b0  = {{byte_b0}}
byte_b1  = {{byte_b1}}
byte_b2  = {{byte_b2}}
byte_b3  = {{byte_b3}}
byte_b4  = {{byte_b4}}
byte_b5  = {{byte_b5}}
byte_b6  = {{byte_b6}}
byte_b7  = {{byte_b7}}
byte_b8  = {{byte_b8}}
byte_b9  = {{byte_b9}}
byte_b10 = {{byte_b10}}
byte_b11 = {{byte_b11}}
byte_b12 = {{byte_b12}}
byte_b13 = {{byte_b13}}
byte_b14 = {{byte_b14}}
byte_b15 = {{byte_b15}}
byte_b16 = {{byte_b16}}
byte_b17 = {{byte_b17}}
byte_b18 = {{byte_b18}}
byte_b19 = {{byte_b19}}
byte_b20 = {{byte_b20}}
byte_b21 = {{byte_b21}}
byte_b22 = {{byte_b22}}
byte_b23 = {{byte_b23}}
byte_b24 = {{byte_b24}}
byte_b25 = {{byte_b25}}
""";
    }

    action test_binary_to_uint32_t {
        bit [32]  uint32_b0  , uint32_b1  , uint32_b2  , uint32_b3  , uint32_b4  , uint32_b5  , uint32_b6  , uint32_b7  , uint32_b8  , uint32_b9 ;
        bit [32]  uint32_b10 , uint32_b11 , uint32_b12 , uint32_b13 , uint32_b14 , uint32_b15 , uint32_b16 , uint32_b17 , uint32_b18 , uint32_b19;
        bit [32]  uint32_b20 , uint32_b21 , uint32_b22 , uint32_b23 , uint32_b24 , uint32_b25 , uint32_b26 , uint32_b27 , uint32_b28 , uint32_b29;

        exec post_solve {
            // With base specifier but no size constant
            uint32_b0  =  'b01111111111111111111111111111111        ; //   2**31 - 1                               => 0x7FFFFFFF =>  2147483647
            uint32_b1  = -'b01111111111111111111111111111111        ; // -(2**31 - 1) => 2's-complement 0x7FFFFFFF => 0x80000001 =>  2147483649
            uint32_b2  =  'b10000000000000000000000000000000        ; //   2**31                                   => 0x80000000 =>  2147483648
            uint32_b3  = -'b10000000000000000000000000000000        ; // -(2**31)     => 2's-complement 0x80000000 => 0x80000000 =>  2147483648
            uint32_b4  =  'b11111111111111111111111111111111        ; //   2**32 - 1                               => 0xFFFFFFFF =>  4294967295
            uint32_b5  = -'b11111111111111111111111111111111        ; // -(2**32 - 1) => 2's-complement 0xFFFFFFFF => 0x00000001 =>  1
            uint32_b6  =  'B1011_1110_0001_0011_1011_1010           ; // Support capital 'D' and underscore        => 0x00BE13BA =>  12456890

            // With base specifier but no size constant and with signed designator
            uint32_b7  =  'sb01111111111111111111111111111111       ; //   2**31 - 1                               => 0x7FFFFFFF =>  2147483647
            uint32_b8  = -'sb01111111111111111111111111111111       ; // -(2**31 - 1) => 2's-complement 0x7FFFFFFF => 0x80000001 =>  2147483649
            uint32_b9  =  'sb10000000000000000000000000000000       ; //   2**31                                   => 0x80000000 => =>  2147483648
            uint32_b10 = -'sb10000000000000000000000000000000       ; // -(2**31)     => 2's-complement 0x80000000 => 0x80000000 =>  2147483648
            uint32_b11 =  'sb11111111111111111111111111111111       ; //   2**32 - 1                               => 0xFFFFFFFF =>  4294967295
            uint32_b12 = -'sb11111111111111111111111111111111       ; // -(2**32 - 1) => 2's-complement 0xFFFFFFFF => 0x00000001 =>  1
            uint32_b13 =  'SB1011_1110_0001_0011_1011_1010          ; // Support capital 'S' and underscore        => 0x00BE13BA =>  12456890

            // With 33 bits base specifier
            uint32_b14 =  33'b011111111111111111111111111111111     ; //   2**32 - 1                                => 0x0FFFFFFFF => 0xFFFFFFFF =>  4294967295
            uint32_b15 = -33'b011111111111111111111111111111111     ; // -(2**32 - 1) => 2's-complement 0x0FFFFFFFF => 0x100000001 => 0x00000001 =>  1
            uint32_b16 =  33'b100000000000000000000000000000000     ; //   2**32                                    => 0x100000000 => 0x00000000 =>  0
            uint32_b17 = -33'b100000000000000000000000000000000     ; // -(2**32)     => 2's-complement 0x100000000 => 0x100000000 => 0x00000000 =>  0
            uint32_b18 =  33'b111111111111111111111111111111111     ; //   2**33 - 1                                => 0x1FFFFFFFF => 0xFFFFFFFF =>  4294967295
            uint32_b19 = -33'b111111111111111111111111111111111     ; // -(2**33 - 1) => 2's-complement 0x1FFFFFFFF => 0x000000001 => 0x00000001 =>  1

            // With 33 bits base specifier and with signed designator
            uint32_b20 =  33'sb011111111111111111111111111111111    ; //   2**32 - 1                                => 0x0FFFFFFFF => 0xFFFFFFFF =>  4294967295
            uint32_b21 = -33'sb011111111111111111111111111111111    ; // -(2**32 - 1) => 2's-complement 0x0FFFFFFFF => 0x100000001 => 0x00000001 =>  1
            uint32_b22 =  33'sb100000000000000000000000000000000    ; //   2**32                                    => 0x100000000 => 0x00000000 =>  0
            uint32_b23 = -33'sb100000000000000000000000000000000    ; // -(2**32)     => 2's-complement 0x100000000 => 0x100000000 => 0x00000000 =>  0
            uint32_b24 =  33'sb111111111111111111111111111111111    ; //   2**33 - 1                                => 0x1FFFFFFFF => 0xFFFFFFFF =>  4294967295
            uint32_b25 = -33'sb111111111111111111111111111111111    ; // -(2**33 - 1) => 2's-complement 0x1FFFFFFFF => 0x000000001 => 0x00000001 =>  1
        }

        exec body ASM =
"""
uint32_b0  = {{uint32_b0}}
uint32_b1  = {{uint32_b1}}
uint32_b2  = {{uint32_b2}}
uint32_b3  = {{uint32_b3}}
uint32_b4  = {{uint32_b4}}
uint32_b5  = {{uint32_b5}}
uint32_b6  = {{uint32_b6}}
uint32_b7  = {{uint32_b7}}
uint32_b8  = {{uint32_b8}}
uint32_b9  = {{uint32_b9}}
uint32_b10 = {{uint32_b10}}
uint32_b11 = {{uint32_b11}}
uint32_b12 = {{uint32_b12}}
uint32_b13 = {{uint32_b13}}
uint32_b14 = {{uint32_b14}}
uint32_b15 = {{uint32_b15}}
uint32_b16 = {{uint32_b16}}
uint32_b17 = {{uint32_b17}}
uint32_b18 = {{uint32_b18}}
uint32_b19 = {{uint32_b19}}
uint32_b20 = {{uint32_b20}}
uint32_b21 = {{uint32_b21}}
uint32_b22 = {{uint32_b22}}
uint32_b23 = {{uint32_b23}}
uint32_b24 = {{uint32_b24}}
uint32_b25 = {{uint32_b25}}
""";
    }

	action root_a {
        activity {
            do test_binary_to_int;
            do test_binary_to_byte;
            do test_binary_to_uint32_t;
        }
    }
}

/**@}*/
