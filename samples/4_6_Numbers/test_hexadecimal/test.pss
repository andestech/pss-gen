/*!
@weakgroup      test
@{
@file
@author         Luther Lee
@data           2023/07/06
@brief          Test integer constants with hexadecimal format and assigned to int and bit types.
@version
Portable Test and Stimulus Standard Version 2.0 <br>
> Section 4.6 : Numbers <br>
> Section 8.2 : Numeric types <br>


---------------------------------------------------------------------------------------------------

### Test Command
@code{.unparsed}
make gentarget
@endcode
*/
component pss_top {
    action test_hexadecimal_to_int {
        int int_h0 , int_h1 , int_h2 , int_h3 , int_h4 , int_h5 , int_h6 , int_h7 , int_h8 , int_h9 ;
        int int_h10, int_h11, int_h12, int_h13, int_h14, int_h15, int_h16, int_h17, int_h18, int_h19;
        int int_h20, int_h21, int_h22, int_h23, int_h24, int_h25, int_h26, int_h27, int_h28, int_h29;
        int int_h30, int_h31, int_h32, int_h33, int_h34, int_h35, int_h36, int_h37, int_h38, int_h39;

        exec post_solve {
            // No base specifier
            int_h0  =  0x0              ; //                                                         =>  0
            int_h1  =  0x7FFFFFFF       ; //   2**31 - 1                               => 0x7FFFFFFF =>  2147483647
            int_h2  = -0x7FFFFFFF       ; // -(2**31 - 1) => 2's-complement 0x7FFFFFFF => 0x80000001 => -2147483647
            int_h3  = -0x80000000       ; // -(2**31)     => 2's-complement 0x80000000 => 0x80000000 => -2147483648
            int_h4  =  0x499602D2       ; //                                              0x499602D2 =>  1234567890
            int_h5  =  0XBE_13_BA       ; // Support capital 'X' and underscore        => 0x00BE13BA =>  12456890

            // With base specifier but no size constant
            int_h6  =  'h7FFFFFFF       ; //   2**31 - 1                               => 0x7FFFFFFF =>  2147483647
            int_h7  = -'h7FFFFFFF       ; // -(2**31 - 1) => 2's-complement 0x7FFFFFFF => 0x80000001 => -2147483647
            int_h8  =  'h80000000       ; //   2**31                                   => 0x80000000 => -2147483648
            int_h9  = -'h80000000       ; // -(2**31)     => 2's-complement 0x80000000 => 0x80000000 => -2147483648
            int_h10 =  'hFFFFFFFF       ; //   2**32 - 1                               => 0xFFFFFFFF => -1
            int_h11 = -'hFFFFFFFF       ; // -(2**32 - 1) => 2's-complement 0xFFFFFFFF => 0x00000001 =>  1
            int_h12 =  'H00_BE_13_BA    ; // Support capital 'H' and underscore        => 0x00BE13BA =>  12456890

            // With base specifier but no size constant and with signed designator
            int_h13 =  'sh7FFFFFFF      ; //   2**31 - 1                               => 0x7FFFFFFF =>  2147483647
            int_h14 = -'sh7FFFFFFF      ; // -(2**31 - 1) => 2's-complement 0x7FFFFFFF => 0x80000001 => -2147483647
            int_h15 =  'sh80000000      ; //   2**31                                   => 0x80000000 => -2147483648
            int_h16 = -'sh80000000      ; // -(2**31)     => 2's-complement 0x80000000 => 0x80000000 => -2147483648
            int_h17 =  'shFFFFFFFF      ; //   2**32 - 1                               => 0xFFFFFFFF => -1
            int_h18 = -'shFFFFFFFF      ; // -(2**32 - 1) => 2's-complement 0xFFFFFFFF => 0x00000001 =>  1
            int_h19 =  'SH00_BE_13_BA   ; // Support capital 'S' and underscore        => 0x00BE13BA =>  12456890

            // With 33 bits base specifier
            int_h20 =  33'h0FFFFFFFF    ; //   2**32 - 1                                => 0x0FFFFFFFF => 0xFFFFFFFF => -1
            int_h21 = -33'h0FFFFFFFF    ; // -(2**32 - 1) => 2's-complement 0x0FFFFFFFF => 0x100000001 => 0x00000001 =>  1
            int_h22 =  33'h100000000    ; //   2**32                                    => 0x100000000 => 0x00000000 =>  0
            int_h23 = -33'h100000000    ; // -(2**32)     => 2's-complement 0x100000000 => 0x100000000 => 0x00000000 =>  0
            int_h24 =  33'h1FFFFFFFF    ; //   2**33 - 1                                => 0x1FFFFFFFF => 0xFFFFFFFF => -1
            int_h25 = -33'h1FFFFFFFF    ; // -(2**33 - 1) => 2's-complement 0x1FFFFFFFF => 0x000000001 => 0x00000001 =>  1

            // With 33 bits base specifier and with signed designator
            int_h26 =  33'sh0FFFFFFFF   ; //   2**32 - 1                                => 0x0FFFFFFFF => 0xFFFFFFFF => -1
            int_h27 = -33'sh0FFFFFFFF   ; // -(2**32 - 1) => 2's-complement 0x0FFFFFFFF => 0x100000001 => 0x00000001 =>  1
            int_h28 =  33'sh100000000   ; //   2**32                                    => 0x100000000 => 0x00000000 =>  0
            int_h29 = -33'sh100000000   ; // -(2**32)     => 2's-complement 0x100000000 => 0x100000000 => 0x00000000 =>  0
            int_h30 =  33'sh1FFFFFFFF   ; //   2**33 - 1                                => 0x1FFFFFFFF => 0xFFFFFFFF => -1
            int_h31 = -33'sh1FFFFFFFF   ; // -(2**33 - 1) => 2's-complement 0x1FFFFFFFF => 0x000000001 => 0x00000001 =>  1
        }

        exec body ASM =
"""
int_h0  = {{int_h0}}
int_h1  = {{int_h1}}
int_h2  = {{int_h2}}
int_h3  = {{int_h3}}
int_h4  = {{int_h4}}
int_h5  = {{int_h5}}
int_h6  = {{int_h6}}
int_h7  = {{int_h7}}
int_h8  = {{int_h8}}
int_h9  = {{int_h9}}
int_h10 = {{int_h10}}
int_h11 = {{int_h11}}
int_h12 = {{int_h12}}
int_h13 = {{int_h13}}
int_h14 = {{int_h14}}
int_h15 = {{int_h15}}
int_h16 = {{int_h16}}
int_h17 = {{int_h17}}
int_h18 = {{int_h18}}
int_h19 = {{int_h19}}
int_h20 = {{int_h20}}
int_h21 = {{int_h21}}
int_h22 = {{int_h22}}
int_h23 = {{int_h23}}
int_h24 = {{int_h24}}
int_h25 = {{int_h25}}
int_h26 = {{int_h26}}
int_h27 = {{int_h27}}
int_h28 = {{int_h28}}
int_h29 = {{int_h29}}
int_h30 = {{int_h30}}
int_h31 = {{int_h31}}
""";
    }

    action test_hexadecimal_to_byte {
        bit [8] byte_h0  , byte_h1  , byte_h2  , byte_h3  , byte_h4  , byte_h5  , byte_h6  , byte_h7  , byte_h8  , byte_h9 ;
        bit [8] byte_h10 , byte_h11 , byte_h12 , byte_h13 , byte_h14 , byte_h15 , byte_h16 , byte_h17 , byte_h18 , byte_h19;
        bit [8] byte_h20 , byte_h21 , byte_h22 , byte_h23 , byte_h24 , byte_h25 , byte_h26 , byte_h27 , byte_h28 , byte_h29;
        bit [8] byte_h30 , byte_h31 , byte_h32 , byte_h33 , byte_h34 , byte_h35 , byte_h36 , byte_h37 , byte_h38 , byte_h39;

        exec post_solve {
            // No base specifier
            byte_h0  =  0x0             ; //                                                                 =>  0
            byte_h1  =  0x7FFFFFFF      ; //   2**31 - 1                               => 0x7FFFFFFF => 0xFF =>  255
            byte_h2  = -0x7FFFFFFF      ; // -(2**31 - 1) => 2's-complement 0x7FFFFFFF => 0x80000001 => 0x01 =>  1
            byte_h3  = -0x80000000      ; // -(2**31)     => 2's-complement 0x80000000 => 0x80000000 => 0x00 =>  0
            byte_h4  =  0x499602D2      ; //                                              0x499602D2 => 0x00 =>  0
            byte_h5  =  0XBE_13_BA      ; // Support capital 'X' and underscore        => 0x00BE13BA => 0xBA =>  186

            // With base specifier but no size constant
            byte_h6  =  'h7FFFFFFF      ; //   2**31 - 1                               => 0x7FFFFFFF => 0xFF =>  255
            byte_h7  = -'h7FFFFFFF      ; // -(2**31 - 1) => 2's-complement 0x7FFFFFFF => 0x80000001 => 0x01 =>  1
            byte_h8  =  'h80000000      ; //   2**31                                   => 0x80000000 => 0x00 =>  0
            byte_h9  = -'h80000000      ; // -(2**31)     => 2's-complement 0x80000000 => 0x80000000 => 0x00 =>  0
            byte_h10 =  'hFFFFFFFF      ; //   2**32 - 1                               => 0xFFFFFFFF => 0xFF =>  255
            byte_h11 = -'hFFFFFFFF      ; // -(2**32 - 1) => 2's-complement 0xFFFFFFFF => 0x00000001 => 0x01 =>  1
            byte_h12 =  'H00_BE_13_BA   ; // Support capital 'H' and underscore        => 0x00BE13BA => 0xBA =>  186

            // With base specifier but no size constant and with signed designator
            byte_h13 =  'sh7FFFFFFF     ; //   2**31 - 1                               => 0x7FFFFFFF => 0xFF =>  255
            byte_h14 = -'sh7FFFFFFF     ; // -(2**31 - 1) => 2's-complement 0x7FFFFFFF => 0x80000001 => 0x01 =>  1
            byte_h15 =  'sh80000000     ; //   2**31                                   => 0x80000000 => 0x00 =>  0
            byte_h16 = -'sh80000000     ; // -(2**31)     => 2's-complement 0x80000000 => 0x80000000 => 0x00 =>  0
            byte_h17 =  'shFFFFFFFF     ; //   2**32 - 1                               => 0xFFFFFFFF => 0xFF =>  255
            byte_h18 = -'shFFFFFFFF     ; // -(2**32 - 1) => 2's-complement 0xFFFFFFFF => 0x00000001 => 0x01 =>  1
            byte_h19 =  'SH00_BE_13_BA  ; // Support capital 'S' and underscore        => 0x00BE13BA => 0xBA =>  186

            // With 33 bits base specifier
            byte_h20 =  33'h0FFFFFFFF   ; //   2**32 - 1                                => 0x0FFFFFFFF => 0xFF =>  255
            byte_h21 = -33'h0FFFFFFFF   ; // -(2**32 - 1) => 2's-complement 0x0FFFFFFFF => 0x100000001 => 0x01 =>  1
            byte_h22 =  33'h100000000   ; //   2**32                                    => 0x100000000 => 0x00 =>  0
            byte_h23 = -33'h100000000   ; // -(2**32)     => 2's-complement 0x100000000 => 0x100000000 => 0x00 =>  0
            byte_h24 =  33'h1FFFFFFFF   ; //   2**33 - 1                                => 0x1FFFFFFFF => 0xFF =>  255
            byte_h25 = -33'h1FFFFFFFF   ; // -(2**33 - 1) => 2's-complement 0x1FFFFFFFF => 0x000000001 => 0x01 =>  1

            // With 33 bits base specifier and with signed designator
            byte_h26 =  33'sh0FFFFFFFF  ; //   2**32 - 1                                => 0x0FFFFFFFF => 0xFF =>  255
            byte_h27 = -33'sh0FFFFFFFF  ; // -(2**32 - 1) => 2's-complement 0x0FFFFFFFF => 0x100000001 => 0x01 =>  1
            byte_h28 =  33'sh100000000  ; //   2**32                                    => 0x100000000 => 0x00 =>  0
            byte_h29 = -33'sh100000000  ; // -(2**32)     => 2's-complement 0x100000000 => 0x100000000 => 0x00 =>  0
            byte_h30 =  33'sh1FFFFFFFF  ; //   2**33 - 1                                => 0x1FFFFFFFF => 0xFF =>  255
            byte_h31 = -33'sh1FFFFFFFF  ; // -(2**33 - 1) => 2's-complement 0x1FFFFFFFF => 0x000000001 => 0x01 =>  1
        }

        exec body ASM =
"""
byte_h0  = {{byte_h0}}
byte_h1  = {{byte_h1}}
byte_h2  = {{byte_h2}}
byte_h3  = {{byte_h3}}
byte_h4  = {{byte_h4}}
byte_h5  = {{byte_h5}}
byte_h6  = {{byte_h6}}
byte_h7  = {{byte_h7}}
byte_h8  = {{byte_h8}}
byte_h9  = {{byte_h9}}
byte_h10 = {{byte_h10}}
byte_h11 = {{byte_h11}}
byte_h12 = {{byte_h12}}
byte_h13 = {{byte_h13}}
byte_h14 = {{byte_h14}}
byte_h15 = {{byte_h15}}
byte_h16 = {{byte_h16}}
byte_h17 = {{byte_h17}}
byte_h18 = {{byte_h18}}
byte_h19 = {{byte_h19}}
byte_h20 = {{byte_h20}}
byte_h21 = {{byte_h21}}
byte_h22 = {{byte_h22}}
byte_h23 = {{byte_h23}}
byte_h24 = {{byte_h24}}
byte_h25 = {{byte_h25}}
byte_h26 = {{byte_h26}}
byte_h27 = {{byte_h27}}
byte_h28 = {{byte_h28}}
byte_h29 = {{byte_h29}}
byte_h30 = {{byte_h30}}
byte_h31 = {{byte_h31}}
""";
    }

    action test_hexadecimal_to_uint32_t {
        bit [32]  uint32_h0  , uint32_h1  , uint32_h2  , uint32_h3  , uint32_h4  , uint32_h5  , uint32_h6  , uint32_h7  , uint32_h8  , uint32_h9 ;
        bit [32]  uint32_h10 , uint32_h11 , uint32_h12 , uint32_h13 , uint32_h14 , uint32_h15 , uint32_h16 , uint32_h17 , uint32_h18 , uint32_h19;
        bit [32]  uint32_h20 , uint32_h21 , uint32_h22 , uint32_h23 , uint32_h24 , uint32_h25 , uint32_h26 , uint32_h27 , uint32_h28 , uint32_h29;
        bit [32]  uint32_h30 , uint32_h31 , uint32_h32 , uint32_h33 , uint32_h34 , uint32_h35 , uint32_h36 , uint32_h37 , uint32_h38 , uint32_h39;

        exec post_solve {
            // No base specifier
            uint32_h0  =  0x0               ; //                                                         =>  0
            uint32_h1  =  0x7FFFFFFF        ; //   2**31 - 1                               => 0x7FFFFFFF =>  2147483647
            uint32_h2  = -0x7FFFFFFF        ; // -(2**31 - 1) => 2's-complement 0x7FFFFFFF => 0x80000001 =>  2147483649
            uint32_h3  = -0x80000000        ; // -(2**31)     => 2's-complement 0x80000000 => 0x80000000 =>  2147483648
            uint32_h4  =  0x499602D2        ; //                                              0x499602D2 =>  1234567890
            uint32_h5  =  0XBE_13_BA        ; // Support capital 'X' and underscore        => 0x00BE13BA =>  12456890

            // With base specifier but no size constant
            uint32_h6  =  'h7FFFFFFF        ; //   2**31 - 1                               => 0x7FFFFFFF =>  2147483647
            uint32_h7  = -'h7FFFFFFF        ; // -(2**31 - 1) => 2's-complement 0x7FFFFFFF => 0x80000001 =>  2147483649
            uint32_h8  =  'h80000000        ; //   2**31                                   => 0x80000000 =>  2147483648
            uint32_h9  = -'h80000000        ; // -(2**31)     => 2's-complement 0x80000000 => 0x80000000 =>  2147483648
            uint32_h10 =  'hFFFFFFFF        ; //   2**32 - 1                               => 0xFFFFFFFF =>  4294967295
            uint32_h11 = -'hFFFFFFFF        ; // -(2**32 - 1) => 2's-complement 0xFFFFFFFF => 0x00000001 =>  1
            uint32_h12 =  'H00_BE_13_BA     ; // Support capital 'H' and underscore        => 0x00BE13BA =>  12456890

            // With base specifier but no size constant and with signed designator
            uint32_h13 =  'sh7FFFFFFF       ; //   2**31 - 1                               => 0x7FFFFFFF =>  2147483647
            uint32_h14 = -'sh7FFFFFFF       ; // -(2**31 - 1) => 2's-complement 0x7FFFFFFF => 0x80000001 =>  2147483649
            uint32_h15 =  'sh80000000       ; //   2**31                                   => 0x80000000 =>  2147483648
            uint32_h16 = -'sh80000000       ; // -(2**31)     => 2's-complement 0x80000000 => 0x80000000 =>  2147483648
            uint32_h17 =  'shFFFFFFFF       ; //   2**32 - 1                               => 0xFFFFFFFF =>  4294967295
            uint32_h18 = -'shFFFFFFFF       ; // -(2**32 - 1) => 2's-complement 0xFFFFFFFF => 0x00000001 =>  1
            uint32_h19 =  'SH00_BE_13_BA    ; // Support capital 'S' and underscore        => 0x00BE13BA =>  12456890

            // With 33 bits base specifier
            uint32_h20 =  33'h0FFFFFFFF     ; //   2**32 - 1                                => 0x0FFFFFFFF => 0xFFFFFFFF =>  4294967295
            uint32_h21 = -33'h0FFFFFFFF     ; // -(2**32 - 1) => 2's-complement 0x0FFFFFFFF => 0x100000001 => 0x00000001 =>  1
            uint32_h22 =  33'h100000000     ; //   2**32                                    => 0x100000000 => 0x00000000 =>  0
            uint32_h23 = -33'h100000000     ; // -(2**32)     => 2's-complement 0x100000000 => 0x100000000 => 0x00000000 =>  0
            uint32_h24 =  33'h1FFFFFFFF     ; //   2**33 - 1                                => 0x1FFFFFFFF => 0xFFFFFFFF =>  4294967295
            uint32_h25 = -33'h1FFFFFFFF     ; // -(2**33 - 1) => 2's-complement 0x1FFFFFFFF => 0x000000001 => 0x00000001 =>  1

            // With 33 bits base specifier and with signed designator
            uint32_h26 =  33'sh0FFFFFFFF    ; //   2**32 - 1                                => 0x0FFFFFFFF => 0xFFFFFFFF =>  4294967295
            uint32_h27 = -33'sh0FFFFFFFF    ; // -(2**32 - 1) => 2's-complement 0x0FFFFFFFF => 0x100000001 => 0x00000001 =>  1
            uint32_h28 =  33'sh100000000    ; //   2**32                                    => 0x100000000 => 0x00000000 =>  0
            uint32_h29 = -33'sh100000000    ; // -(2**32)     => 2's-complement 0x100000000 => 0x100000000 => 0x00000000 =>  0
            uint32_h30 =  33'sh1FFFFFFFF    ; //   2**33 - 1                                => 0x1FFFFFFFF => 0xFFFFFFFF =>  4294967295
            uint32_h31 = -33'sh1FFFFFFFF    ; // -(2**33 - 1) => 2's-complement 0x1FFFFFFFF => 0x000000001 => 0x00000001 =>  1
        }

        exec body ASM =
"""
uint32_h0  = {{uint32_h0}}
uint32_h1  = {{uint32_h1}}
uint32_h2  = {{uint32_h2}}
uint32_h3  = {{uint32_h3}}
uint32_h4  = {{uint32_h4}}
uint32_h5  = {{uint32_h5}}
uint32_h6  = {{uint32_h6}}
uint32_h7  = {{uint32_h7}}
uint32_h8  = {{uint32_h8}}
uint32_h9  = {{uint32_h9}}
uint32_h10 = {{uint32_h10}}
uint32_h11 = {{uint32_h11}}
uint32_h12 = {{uint32_h12}}
uint32_h13 = {{uint32_h13}}
uint32_h14 = {{uint32_h14}}
uint32_h15 = {{uint32_h15}}
uint32_h16 = {{uint32_h16}}
uint32_h17 = {{uint32_h17}}
uint32_h18 = {{uint32_h18}}
uint32_h19 = {{uint32_h19}}
uint32_h20 = {{uint32_h20}}
uint32_h21 = {{uint32_h21}}
uint32_h22 = {{uint32_h22}}
uint32_h23 = {{uint32_h23}}
uint32_h24 = {{uint32_h24}}
uint32_h25 = {{uint32_h25}}
uint32_h26 = {{uint32_h26}}
uint32_h27 = {{uint32_h27}}
uint32_h28 = {{uint32_h28}}
uint32_h29 = {{uint32_h29}}
uint32_h30 = {{uint32_h30}}
uint32_h31 = {{uint32_h31}}
""";
    }

	action root_a {
        activity {
            do test_hexadecimal_to_int;
            do test_hexadecimal_to_byte;
            do test_hexadecimal_to_uint32_t;
        }
    }
}

/**@}*/
