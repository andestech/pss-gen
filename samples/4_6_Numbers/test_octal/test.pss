/*!
@weakgroup      test
@{
@file
@author         Luther Lee
@data           2023/07/06
@brief          Test integer constants with octal format and assigned to int and bit types.
@version
Portable Test and Stimulus Standard Version 2.0 <br>
> Section 4.6 : Numbers <br>
> Section 8.2 : Numeric types <br>


---------------------------------------------------------------------------------------------------

### Test Command
@code{.unparsed}
make gentarget
@endcode
*/
component pss_top {
    action test_octal_to_int {
        int int_o0 , int_o1 , int_o2 , int_o3 , int_o4 , int_o5 , int_o6 , int_o7 , int_o8 , int_o9 ;
        int int_o10, int_o11, int_o12, int_o13, int_o14, int_o15, int_o16, int_o17, int_o18, int_o19;
        int int_o20, int_o21, int_o22, int_o23, int_o24, int_o25, int_o26, int_o27, int_o28, int_o29;
        int int_o30, int_o31, int_o32, int_o33, int_o34, int_o35, int_o36, int_o37, int_o38, int_o39;

        exec post_solve {
            // No base specifier
            int_o0  =  00               ; //                                                         =>  0
            int_o1  =  017777777777     ; //   2**31 - 1                               => 0x7FFFFFFF =>  2147483647
            int_o2  = -017777777777     ; // -(2**31 - 1) => 2's-complement 0x7FFFFFFF => 0x80000001 => -2147483647
            int_o3  = -020000000000     ; // -(2**31)     => 2's-complement 0x80000000 => 0x80000000 => -2147483648
            int_o4  =  01234567890      ; //                                              0x499602D2 =>  1234567890
            int_o5  =  057_411_672      ; // Support underscore between number         => 0x00BE13BA =>  12456890

            // With base specifier but no size constant
            int_o6  =  'o17777777777    ; //   2**31 - 1                               => 0x7FFFFFFF =>  2147483647
            int_o7  = -'o17777777777    ; // -(2**31 - 1) => 2's-complement 0x7FFFFFFF => 0x80000001 => -2147483647
            int_o8  =  'o20000000000    ; //   2**31                                   => 0x80000000 => -2147483648
            int_o9  = -'o20000000000    ; // -(2**31)     => 2's-complement 0x80000000 => 0x80000000 => -2147483648
            int_o10 =  'o37777777777    ; //   2**32 - 1                               => 0xFFFFFFFF => -1
            int_o11 = -'o37777777777    ; // -(2**32 - 1) => 2's-complement 0xFFFFFFFF => 0x00000001 =>  1
            int_o12 =  'O57_411_672     ; // Support capital 'O' and underscore        => 0x00BE13BA =>  12456890

            // With base specifier but no size constant and with signed designator
            int_o13 =  'so17777777777   ; //   2**31 - 1                               => 0x7FFFFFFF =>  2147483647
            int_o14 = -'so17777777777   ; // -(2**31 - 1) => 2's-complement 0x7FFFFFFF => 0x80000001 => -2147483647
            int_o15 =  'so20000000000   ; //   2**31                                   => 0x80000000 => -2147483648
            int_o16 = -'so20000000000   ; // -(2**31)     => 2's-complement 0x80000000 => 0x80000000 => -2147483648
            int_o17 =  'so37777777777   ; //   2**32 - 1                               => 0xFFFFFFFF => -1
            int_o18 = -'so37777777777   ; // -(2**32 - 1) => 2's-complement 0xFFFFFFFF => 0x00000001 =>  1
            int_o19 =  'SO37777777777   ; // Support capital 'S' and underscore        => 0x00BE13BA =>  12456890

            // With 33 bits base specifier
            int_o20 =  33'o37777777777  ; //   2**32 - 1                                => 0x0FFFFFFFF => 0xFFFFFFFF => -1
            int_o21 = -33'o37777777777  ; // -(2**32 - 1) => 2's-complement 0x0FFFFFFFF => 0x100000001 => 0x00000001 =>  1
            int_o22 =  33'o40000000000  ; //   2**32                                    => 0x100000000 => 0x00000000 =>  0
            int_o23 = -33'o40000000000  ; // -(2**32)     => 2's-complement 0x100000000 => 0x100000000 => 0x00000000 =>  0
            int_o24 =  33'o77777777777  ; //   2**33 - 1                                => 0x1FFFFFFFF => 0xFFFFFFFF => -1
            int_o25 = -33'o77777777777  ; // -(2**33 - 1) => 2's-complement 0x1FFFFFFFF => 0x000000001 => 0x00000001 =>  1

            // With 33 bits base specifier and with signed designator
            int_o26 =  33'so37777777777 ; //   2**32 - 1                                => 0x0FFFFFFFF => 0xFFFFFFFF => -1
            int_o27 = -33'so37777777777 ; // -(2**32 - 1) => 2's-complement 0x0FFFFFFFF => 0x100000001 => 0x00000001 =>  1
            int_o28 =  33'so40000000000 ; //   2**32                                    => 0x100000000 => 0x00000000 =>  0
            int_o29 = -33'so40000000000 ; // -(2**32)     => 2's-complement 0x100000000 => 0x100000000 => 0x00000000 =>  0
            int_o30 =  33'so77777777777 ; //   2**33 - 1                                => 0x1FFFFFFFF => 0xFFFFFFFF => -1
            int_o31 = -33'so77777777777 ; // -(2**33 - 1) => 2's-complement 0x1FFFFFFFF => 0x000000001 => 0x00000001 =>  1
        }

        exec body ASM =
"""
int_o0  = {{int_o0}}
int_o1  = {{int_o1}}
int_o2  = {{int_o2}}
int_o3  = {{int_o3}}
int_o4  = {{int_o4}}
int_o5  = {{int_o5}}
int_o6  = {{int_o6}}
int_o7  = {{int_o7}}
int_o8  = {{int_o8}}
int_o9  = {{int_o9}}
int_o10 = {{int_o10}}
int_o11 = {{int_o11}}
int_o12 = {{int_o12}}
int_o13 = {{int_o13}}
int_o14 = {{int_o14}}
int_o15 = {{int_o15}}
int_o16 = {{int_o16}}
int_o17 = {{int_o17}}
int_o18 = {{int_o18}}
int_o19 = {{int_o19}}
int_o20 = {{int_o20}}
int_o21 = {{int_o21}}
int_o22 = {{int_o22}}
int_o23 = {{int_o23}}
int_o24 = {{int_o24}}
int_o25 = {{int_o25}}
int_o26 = {{int_o26}}
int_o27 = {{int_o27}}
int_o28 = {{int_o28}}
int_o29 = {{int_o29}}
int_o30 = {{int_o30}}
int_o31 = {{int_o31}}
""";
    }

    action test_octal_to_byte {
        bit [8] byte_o0  , byte_o1  , byte_o2  , byte_o3  , byte_o4  , byte_o5  , byte_o6  , byte_o7  , byte_o8  , byte_o9 ;
        bit [8] byte_o10 , byte_o11 , byte_o12 , byte_o13 , byte_o14 , byte_o15 , byte_o16 , byte_o17 , byte_o18 , byte_o19;
        bit [8] byte_o20 , byte_o21 , byte_o22 , byte_o23 , byte_o24 , byte_o25 , byte_o26 , byte_o27 , byte_o28 , byte_o29;
        bit [8] byte_o30 , byte_o31 , byte_o32 , byte_o33 , byte_o34 , byte_o35 , byte_o36 , byte_o37 , byte_o38 , byte_o39;

        exec post_solve {
            // No base specifier
            byte_o0  =  00              ; //                                                                 =>  0
            byte_o1  =  017777777777    ; //   2**31 - 1                               => 0x7FFFFFFF => 0xFF =>  255
            byte_o2  = -017777777777    ; // -(2**31 - 1) => 2's-complement 0x7FFFFFFF => 0x80000001 => 0x01 =>  1
            byte_o3  = -020000000000    ; // -(2**31)     => 2's-complement 0x80000000 => 0x80000000 => 0x00 =>  0
            byte_o4  =  01234567890     ; //                                              0x499602D2 => 0x00 =>  0
            byte_o5  =  057_411_672     ; // Support underscore between number         => 0x00BE13BA => 0xBA =>  186

            // With base specifier but no size constant
            byte_o6  =  'o17777777777   ; //   2**31 - 1                               => 0x7FFFFFFF => 0xFF =>  255
            byte_o7  = -'o17777777777   ; // -(2**31 - 1) => 2's-complement 0x7FFFFFFF => 0x80000001 => 0x01 =>  1
            byte_o8  =  'o20000000000   ; //   2**31                                   => 0x80000000 => 0x00 =>  0
            byte_o9  = -'o20000000000   ; // -(2**31)     => 2's-complement 0x80000000 => 0x80000000 => 0x00 =>  0
            byte_o10 =  'o37777777777   ; //   2**32 - 1                               => 0xFFFFFFFF => 0xFF =>  255
            byte_o11 = -'o37777777777   ; // -(2**32 - 1) => 2's-complement 0xFFFFFFFF => 0x00000001 => 0x01 =>  1
            byte_o12 =  'O57_411_672    ; // Support capital 'O' and underscore        => 0x00BE13BA => 0xBA =>  186

            // With base specifier but no size constant and with signed designator
            byte_o13 =  'so17777777777  ; //   2**31 - 1                               => 0x7FFFFFFF => 0xFF =>  255
            byte_o14 = -'so17777777777  ; // -(2**31 - 1) => 2's-complement 0x7FFFFFFF => 0x80000001 => 0x01 =>  1
            byte_o15 =  'so20000000000  ; //   2**31                                   => 0x80000000 => 0x00 =>  0
            byte_o16 = -'so20000000000  ; // -(2**31)     => 2's-complement 0x80000000 => 0x80000000 => 0x00 =>  0
            byte_o17 =  'so37777777777  ; //   2**32 - 1                               => 0xFFFFFFFF => 0xFF =>  255
            byte_o18 = -'so37777777777  ; // -(2**32 - 1) => 2's-complement 0xFFFFFFFF => 0x00000001 => 0x01 =>  1
            byte_o19 =  'SO37777777777  ; // Support capital 'S' and underscore        => 0x00BE13BA => 0xBA =>  186

            // With 33 bits base specifier
            byte_o20 =  33'o37777777777 ; //   2**32 - 1                                => 0x0FFFFFFFF => 0xFF =>  255
            byte_o21 = -33'o37777777777 ; // -(2**32 - 1) => 2's-complement 0x0FFFFFFFF => 0x100000001 => 0x01 =>  1
            byte_o22 =  33'o40000000000 ; //   2**32                                    => 0x100000000 => 0x00 =>  0
            byte_o23 = -33'o40000000000 ; // -(2**32)     => 2's-complement 0x100000000 => 0x100000000 => 0x00 =>  0
            byte_o24 =  33'o77777777777 ; //   2**33 - 1                                => 0x1FFFFFFFF => 0xFF =>  255
            byte_o25 = -33'o77777777777 ; // -(2**33 - 1) => 2's-complement 0x1FFFFFFFF => 0x000000001 => 0x01 =>  1

            // With 33 bits base specifier and with signed designator
            byte_o26 =  33'so37777777777; //   2**32 - 1                                => 0x0FFFFFFFF => 0xFF =>  255
            byte_o27 = -33'so37777777777; // -(2**32 - 1) => 2's-complement 0x0FFFFFFFF => 0x100000001 => 0x01 =>  1
            byte_o28 =  33'so40000000000; //   2**32                                    => 0x100000000 => 0x00 =>  0
            byte_o29 = -33'so40000000000; // -(2**32)     => 2's-complement 0x100000000 => 0x100000000 => 0x00 =>  0
            byte_o30 =  33'so77777777777; //   2**33 - 1                                => 0x1FFFFFFFF => 0xFF =>  255
            byte_o31 = -33'so77777777777; // -(2**33 - 1) => 2's-complement 0x1FFFFFFFF => 0x000000001 => 0x01 =>  1
        }

        exec body ASM =
"""
byte_o0  = {{byte_o0}}
byte_o1  = {{byte_o1}}
byte_o2  = {{byte_o2}}
byte_o3  = {{byte_o3}}
byte_o4  = {{byte_o4}}
byte_o5  = {{byte_o5}}
byte_o6  = {{byte_o6}}
byte_o7  = {{byte_o7}}
byte_o8  = {{byte_o8}}
byte_o9  = {{byte_o9}}
byte_o10 = {{byte_o10}}
byte_o11 = {{byte_o11}}
byte_o12 = {{byte_o12}}
byte_o13 = {{byte_o13}}
byte_o14 = {{byte_o14}}
byte_o15 = {{byte_o15}}
byte_o16 = {{byte_o16}}
byte_o17 = {{byte_o17}}
byte_o18 = {{byte_o18}}
byte_o19 = {{byte_o19}}
byte_o20 = {{byte_o20}}
byte_o21 = {{byte_o21}}
byte_o22 = {{byte_o22}}
byte_o23 = {{byte_o23}}
byte_o24 = {{byte_o24}}
byte_o25 = {{byte_o25}}
byte_o26 = {{byte_o26}}
byte_o27 = {{byte_o27}}
byte_o28 = {{byte_o28}}
byte_o29 = {{byte_o29}}
byte_o30 = {{byte_o30}}
byte_o31 = {{byte_o31}}
""";
    }

    action test_octal_to_uint32_t {
        bit [32]  uint32_o0  , uint32_o1  , uint32_o2  , uint32_o3  , uint32_o4  , uint32_o5  , uint32_o6  , uint32_o7  , uint32_o8  , uint32_o9 ;
        bit [32]  uint32_o10 , uint32_o11 , uint32_o12 , uint32_o13 , uint32_o14 , uint32_o15 , uint32_o16 , uint32_o17 , uint32_o18 , uint32_o19;
        bit [32]  uint32_o20 , uint32_o21 , uint32_o22 , uint32_o23 , uint32_o24 , uint32_o25 , uint32_o26 , uint32_o27 , uint32_o28 , uint32_o29;
        bit [32]  uint32_o30 , uint32_o31 , uint32_o32 , uint32_o33 , uint32_o34 , uint32_o35 , uint32_o36 , uint32_o37 , uint32_o38 , uint32_o39;

        exec post_solve {
            // No base specifier
            uint32_o0  =  00                ; //                                                         =>  0
            uint32_o1  =  017777777777      ; //   2**31 - 1                               => 0x7FFFFFFF =>  2147483647
            uint32_o2  = -017777777777      ; // -(2**31 - 1) => 2's-complement 0x7FFFFFFF => 0x80000001 =>  2147483649
            uint32_o3  = -020000000000      ; // -(2**31)     => 2's-complement 0x80000000 => 0x80000000 =>  2147483648
            uint32_o4  =  01234567890       ; //                                              0x499602D2 =>  1234567890
            uint32_o5  =  057_411_672       ; // Support underscore between number         => 0x00BE13BA =>  12456890

            // With base specifier but no size constant
            uint32_o6  =  'o17777777777     ; //   2**31 - 1                               => 0x7FFFFFFF =>  2147483647
            uint32_o7  = -'o17777777777     ; // -(2**31 - 1) => 2's-complement 0x7FFFFFFF => 0x80000001 =>  2147483649
            uint32_o8  =  'o20000000000     ; //   2**31                                   => 0x80000000 =>  2147483648
            uint32_o9  = -'o20000000000     ; // -(2**31)     => 2's-complement 0x80000000 => 0x80000000 =>  2147483648
            uint32_o10 =  'o37777777777     ; //   2**32 - 1                               => 0xFFFFFFFF =>  4294967295
            uint32_o11 = -'o37777777777     ; // -(2**32 - 1) => 2's-complement 0xFFFFFFFF => 0x00000001 =>  1
            uint32_o12 =  'O57_411_672      ; // Support capital 'O' and underscore        => 0x00BE13BA =>  12456890

            // With base specifier but no size constant and with signed designator
            uint32_o13 =  'so17777777777    ; //   2**31 - 1                               => 0x7FFFFFFF =>  2147483647
            uint32_o14 = -'so17777777777    ; // -(2**31 - 1) => 2's-complement 0x7FFFFFFF => 0x80000001 =>  2147483649
            uint32_o15 =  'so20000000000    ; //   2**31                                   => 0x80000000 =>  2147483648
            uint32_o16 = -'so20000000000    ; // -(2**31)     => 2's-complement 0x80000000 => 0x80000000 =>  2147483648
            uint32_o17 =  'so37777777777    ; //   2**32 - 1                               => 0xFFFFFFFF =>  4294967295
            uint32_o18 = -'so37777777777    ; // -(2**32 - 1) => 2's-complement 0xFFFFFFFF => 0x00000001 =>  1
            uint32_o19 =  'SO37777777777    ; // Support capital 'S' and underscore        => 0x00BE13BA =>  12456890

            // With 33 bits base specifier
            uint32_o20 =  33'o37777777777   ; //   2**32 - 1                                => 0x0FFFFFFFF => 0xFFFFFFFF =>  4294967295
            uint32_o21 = -33'o37777777777   ; // -(2**32 - 1) => 2's-complement 0x0FFFFFFFF => 0x100000001 => 0x00000001 =>  1
            uint32_o22 =  33'o40000000000   ; //   2**32                                    => 0x100000000 => 0x00000000 =>  0
            uint32_o23 = -33'o40000000000   ; // -(2**32)     => 2's-complement 0x100000000 => 0x100000000 => 0x00000000 =>  0
            uint32_o24 =  33'o77777777777   ; //   2**33 - 1                                => 0x1FFFFFFFF => 0xFFFFFFFF =>  4294967295
            uint32_o25 = -33'o77777777777   ; // -(2**33 - 1) => 2's-complement 0x1FFFFFFFF => 0x000000001 => 0x00000001 =>  1

            // With 33 bits base specifier and with signed designator
            uint32_o26 =  33'so37777777777  ; //   2**32 - 1                                => 0x0FFFFFFFF => 0xFFFFFFFF =>  4294967295
            uint32_o27 = -33'so37777777777  ; // -(2**32 - 1) => 2's-complement 0x0FFFFFFFF => 0x100000001 => 0x00000001 =>  1
            uint32_o28 =  33'so40000000000  ; //   2**32                                    => 0x100000000 => 0x00000000 =>  0
            uint32_o29 = -33'so40000000000  ; // -(2**32)     => 2's-complement 0x100000000 => 0x100000000 => 0x00000000 =>  0
            uint32_o30 =  33'so77777777777  ; //   2**33 - 1                                => 0x1FFFFFFFF => 0xFFFFFFFF =>  4294967295
            uint32_o31 = -33'so77777777777  ; // -(2**33 - 1) => 2's-complement 0x1FFFFFFFF => 0x000000001 => 0x00000001 =>  1
        }

        exec body ASM =
"""
uint32_o0  = {{uint32_o0}}
uint32_o1  = {{uint32_o1}}
uint32_o2  = {{uint32_o2}}
uint32_o3  = {{uint32_o3}}
uint32_o4  = {{uint32_o4}}
uint32_o5  = {{uint32_o5}}
uint32_o6  = {{uint32_o6}}
uint32_o7  = {{uint32_o7}}
uint32_o8  = {{uint32_o8}}
uint32_o9  = {{uint32_o9}}
uint32_o10 = {{uint32_o10}}
uint32_o11 = {{uint32_o11}}
uint32_o12 = {{uint32_o12}}
uint32_o13 = {{uint32_o13}}
uint32_o14 = {{uint32_o14}}
uint32_o15 = {{uint32_o15}}
uint32_o16 = {{uint32_o16}}
uint32_o17 = {{uint32_o17}}
uint32_o18 = {{uint32_o18}}
uint32_o19 = {{uint32_o19}}
uint32_o20 = {{uint32_o20}}
uint32_o21 = {{uint32_o21}}
uint32_o22 = {{uint32_o22}}
uint32_o23 = {{uint32_o23}}
uint32_o24 = {{uint32_o24}}
uint32_o25 = {{uint32_o25}}
uint32_o26 = {{uint32_o26}}
uint32_o27 = {{uint32_o27}}
uint32_o28 = {{uint32_o28}}
uint32_o29 = {{uint32_o29}}
uint32_o30 = {{uint32_o30}}
uint32_o31 = {{uint32_o31}}
""";
    }

	action root_a {
        activity {
            do test_octal_to_int;
            do test_octal_to_byte;
            do test_octal_to_uint32_t;
        }
    }
}

/**@}*/
