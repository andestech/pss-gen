/*!
@weakgroup      test
@{
@file
@author         Luther Lee
@data           2023/10/24
@brief          Test map index operator `[]`.
@version
Portable Test and Stimulus Standard Version 2.1 <br>
> Section 7.9 : Collections <br>
> Section 7.9.4 : Maps <br>


---------------------------------------------------------------------------------------------------

### Test Command
@code{.unparsed}
make gentarget
@endcode
*/
component pss_top {

    enum eSTR2NUM {
        ZERO, ONE, TWO
    };

    struct sSTR2NUM {
        string stringVal = "NULL";
        int intVal = 0;
    };

    action root_a {
        // `bit` as key
        map<bit [4], bit [4] > nibbleMap_0;
        map<bit [4], int     > nibbleMap_1;
        map<bit [4], bool    > nibbleMap_2;
        map<bit [4], eSTR2NUM> nibbleMap_3;
        map<bit [4], string  > nibbleMap_4;
        map<bit [4], float32 > nibbleMap_5;
        map<bit [4], float64 > nibbleMap_6;
        map<bit [4], sSTR2NUM> nibbleMap_7;

        // `int` as key
        map<int, bit [4] > intMap_0;
        map<int, int     > intMap_1;
        map<int, bool    > intMap_2;
        map<int, eSTR2NUM> intMap_3;
        map<int, string  > intMap_4;
        map<int, float32 > intMap_5;
        map<int, float64 > intMap_6;
        map<int, sSTR2NUM> intMap_7;

        // `bool` as key
        map<bool, bit [4] > boolMap_0;
        map<bool, int     > boolMap_1;
        map<bool, bool    > boolMap_2;
        map<bool, eSTR2NUM> boolMap_3;
        map<bool, string  > boolMap_4;
        map<bool, float32 > boolMap_5;
        map<bool, float64 > boolMap_6;
        map<bool, sSTR2NUM> boolMap_7;

        // `enum` as key
        map<eSTR2NUM, bit [4] > enumMap_0;
        map<eSTR2NUM, int     > enumMap_1;
        map<eSTR2NUM, bool    > enumMap_2;
        map<eSTR2NUM, eSTR2NUM> enumMap_3;
        map<eSTR2NUM, string  > enumMap_4;
        map<eSTR2NUM, float32 > enumMap_5;
        map<eSTR2NUM, float64 > enumMap_6;
        map<eSTR2NUM, sSTR2NUM> enumMap_7;

        // `string` as key
        map<string, bit [4] > stringMap_0;
        map<string, int     > stringMap_1;
        map<string, bool    > stringMap_2;
        map<string, eSTR2NUM> stringMap_3;
        map<string, string  > stringMap_4;
        map<string, float32 > stringMap_5;
        map<string, float64 > stringMap_6;
        map<string, sSTR2NUM> stringMap_7;

        // `float32` as key
        map<float32, bit [4] > floatMap_0;
        map<float32, int     > floatMap_1;
        map<float32, bool    > floatMap_2;
        map<float32, eSTR2NUM> floatMap_3;
        map<float32, string  > floatMap_4;
        map<float32, float32 > floatMap_5;
        map<float32, float64 > floatMap_6;
        map<float32, sSTR2NUM> floatMap_7;

        // `struct` as key
        map<sSTR2NUM, bit [4] > structMap_0;
        map<sSTR2NUM, int     > structMap_1;
        map<sSTR2NUM, bool    > structMap_2;
        map<sSTR2NUM, eSTR2NUM> structMap_3;
        map<sSTR2NUM, string  > structMap_4;
        map<sSTR2NUM, float32 > structMap_5;
        map<sSTR2NUM, float64 > structMap_6;
        map<sSTR2NUM, sSTR2NUM> structMap_7;

        sSTR2NUM dummyStruct;

        exec pre_solve {
            // `bit` as key
            nibbleMap_0[4'b0010] = 4'b0011;
            nibbleMap_1[4'b0010] = 3;
            // nibbleMap_2[4'b0010] = true;
            nibbleMap_3[4'b0010] = TWO;
            nibbleMap_4[4'b0010] = "THREE";
            // nibbleMap_5[4'b0010] = 3.3;
            // nibbleMap_6[4'b0010] = 4.4;
            // nibbleMap_7[4'b0010] = dummyStruct;

            // `int` as key
            intMap_0[2] = 4'b0011;
            intMap_1[2] = 3;
            // intMap_2[2] = true;
            intMap_3[2] = TWO;
            intMap_4[2] = "THREE";
            // intMap_5[2] = 3.3;
            // intMap_6[2] = 4.4;
            // intMap_7[2] = dummyStruct;

            // `bool` as key
            // boolMap_0[false] = 4'b0011;
            // boolMap_1[false] = 3;
            // boolMap_2[false] = true;
            // boolMap_3[false] = TWO;
            // boolMap_4[false] = "THREE";
            // boolMap_5[false] = 3.3;
            // boolMap_6[false] = 4.4;
            // boolMap_7[false] = dummyStruct;

            // `enum` as key
            // enumMap_0[ONE] = 4'b0011;
            // enumMap_1[ONE] = 3;
            // enumMap_2[ONE] = true;
            // enumMap_3[ONE] = TWO;
            // enumMap_4[ONE] = "THREE";
            // enumMap_5[ONE] = 3.3;
            // enumMap_6[ONE] = 4.4;
            // enumMap_7[ONE] = dummyStruct;

            // `string` as key
            stringMap_0["c"] = 4'b0011;
            stringMap_1["c"] = 3;
            // stringMap_2["c"] = true;
            stringMap_3["c"] = TWO;
            stringMap_4["c"] = "THREE";
            // stringMap_5["c"] = 3.3;
            // stringMap_6["c"] = 4.4;
            // stringMap_7["c"] = dummyStruct;

            // `float32` as key
            // floatMap_0[3.3] = 4'b0011;
            // floatMap_1[3.3] = 3;
            // floatMap_2[3.3] = true;
            // floatMap_3[3.3] = TWO;
            // floatMap_4[3.3] = "THREE";
            // floatMap_5[3.3] = 3.3;
            // floatMap_6[3.3] = 4.4;
            // floatMap_7[3.3] = dummyStruct;

            // `struct` as key
            // structMap_0[dummyStruct] = 4'b0011;
            // structMap_1[dummyStruct] = 3;
            // structMap_2[dummyStruct] = true;
            // structMap_3[dummyStruct] = TWO;
            // structMap_4[dummyStruct] = "THREE";
            // structMap_5[dummyStruct] = 3.3;
            // structMap_6[dummyStruct] = 4.4;
            // structMap_7[dummyStruct] = dummyStruct;
        }

        bit [4] nibble_0, nibble_1, nibble_2;
        int int_0, int_1, int_2;
        eSTR2NUM enum_0, enum_1, enum_2;
        string string_0, string_1, string_2;
        exec post_solve {
            nibble_0 = nibbleMap_0[4'b0010];
            int_0    = nibbleMap_1[4'b0010];
            enum_0   = nibbleMap_3[4'b0010];
            string_0 = nibbleMap_4[4'b0010];

            nibble_1 = intMap_0[2];
            int_1    = intMap_1[2];
            enum_1   = intMap_3[2];
            string_1 = intMap_4[2];

            nibble_2 = stringMap_0["c"];
            int_2    = stringMap_1["c"];
            enum_2   = stringMap_3["c"];
            string_2 = stringMap_4["c"];
        }

        exec body ASM =
"""
// test_map_operator_index
nibbleMap_0 = {{nibble_0}}
nibbleMap_1 = {{int_0}}
nibbleMap_3 = {{enum_0}}
nibbleMap_4 = {{string_0}}

intMap_0 = {{nibble_1}}
intMap_1 = {{int_1}}
intMap_3 = {{enum_1}}
intMap_4 = {{string_1}}

stringMap_0 = {{nibble_2}}
stringMap_1 = {{int_2}}
stringMap_3 = {{enum_2}}
stringMap_4 = {{string_2}}
""";
    }
}

/**@}*/
