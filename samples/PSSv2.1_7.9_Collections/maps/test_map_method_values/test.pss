/*!
@weakgroup      test
@{
@file
@author         Luther Lee
@data           2023/10/24
@brief          Test map `values()` method.
@version
Portable Test and Stimulus Standard Version 2.1 <br>
> Section 7.9 : Collections <br>
> Section 7.9.4 : Maps <br>


---------------------------------------------------------------------------------------------------

### Test Command
@code{.unparsed}
make gentarget
@endcode
*/
component pss_top {

    enum eSTR2NUM {
        ZERO, ONE, TWO
    };

    struct sSTR2NUM {
        string stringVal = "NULL";
        int intVal = 0;
    };

    action root_a {
        // `bit` as key
        map<bit [4], bit [4] > nibbleMap_0 = {4'b1110:4'b0011, 4'b0110:4'b0010};
        map<bit [4], int     > nibbleMap_1 = {4'b1110:3      , 4'b0110:2      };
        map<bit [4], bool    > nibbleMap_2;
        map<bit [4], eSTR2NUM> nibbleMap_3;
        map<bit [4], string  > nibbleMap_4 = {4'b1110:"C"    , 4'b0110:"B"    };
        map<bit [4], float32 > nibbleMap_5;
        map<bit [4], float64 > nibbleMap_6;
        map<bit [4], sSTR2NUM> nibbleMap_7;

        // `int` as key
        map<int, bit [4] > intMap_0 = {4:4'b0011, 5:4'b0010};
        map<int, int     > intMap_1 = {4:3      , 5:2      };
        map<int, bool    > intMap_2;
        map<int, eSTR2NUM> intMap_3;
        map<int, string  > intMap_4 = {4:"C"    , 5:"B"    };
        map<int, float32 > intMap_5;
        map<int, float64 > intMap_6;
        map<int, sSTR2NUM> intMap_7;

        // `bool` as key
        map<bool, bit [4] > boolMap_0;
        map<bool, int     > boolMap_1;
        map<bool, bool    > boolMap_2;
        map<bool, eSTR2NUM> boolMap_3;
        map<bool, string  > boolMap_4;
        map<bool, float32 > boolMap_5;
        map<bool, float64 > boolMap_6;
        map<bool, sSTR2NUM> boolMap_7;

        // `enum` as key
        map<eSTR2NUM, bit [4] > enumMap_0;
        map<eSTR2NUM, int     > enumMap_1;
        map<eSTR2NUM, bool    > enumMap_2;
        map<eSTR2NUM, eSTR2NUM> enumMap_3;
        map<eSTR2NUM, string  > enumMap_4;
        map<eSTR2NUM, float32 > enumMap_5;
        map<eSTR2NUM, float64 > enumMap_6;
        map<eSTR2NUM, sSTR2NUM> enumMap_7;

        // `string` as key
        map<string, bit [4] > stringMap_0 = {"c":4'b0011, "b":4'b0010};
        map<string, int     > stringMap_1 = {"c":3      , "b":2      };
        map<string, bool    > stringMap_2;
        map<string, eSTR2NUM> stringMap_3;
        map<string, string  > stringMap_4 = {"c":"C"    , "b":"B"    };
        map<string, float32 > stringMap_5;
        map<string, float64 > stringMap_6;
        map<string, sSTR2NUM> stringMap_7;

        // `float32` as key
        map<float32, bit [4] > floatMap_0;
        map<float32, int     > floatMap_1;
        map<float32, bool    > floatMap_2;
        map<float32, eSTR2NUM> floatMap_3;
        map<float32, string  > floatMap_4;
        map<float32, float32 > floatMap_5;
        map<float32, float64 > floatMap_6;
        map<float32, sSTR2NUM> floatMap_7;

        // `struct` as key
        map<sSTR2NUM, bit [4] > structMap_0;
        map<sSTR2NUM, int     > structMap_1;
        map<sSTR2NUM, bool    > structMap_2;
        map<sSTR2NUM, eSTR2NUM> structMap_3;
        map<sSTR2NUM, string  > structMap_4;
        map<sSTR2NUM, float32 > structMap_5;
        map<sSTR2NUM, float64 > structMap_6;
        map<sSTR2NUM, sSTR2NUM> structMap_7;

        list<bit [4]> nibbleList_0, nibbleList_1, nibbleList_2, nibbleList_3, nibbleList_4, nibbleList_5, nibbleList_6;
        list<int> intList_0, intList_1, intList_2, intList_3, intList_4, intList_5, intList_6;
        list<bool> boolList_0, boolList_1, boolList_2, boolList_3, boolList_4, boolList_5, boolList_6;
        list<eSTR2NUM> enumList_0, enumList_1, enumList_2, enumList_3, enumList_4, enumList_5, enumList_6;
        list<string> stringList_0, stringList_1, stringList_2, stringList_3, stringList_4, stringList_5, stringList_6;
        list<sSTR2NUM> structList_0, structList_1, structList_2, structList_3, structList_4, structList_5, structList_6;
        exec pre_solve {
            // `bit` as key
            nibbleList_0 = nibbleMap_0.values();
            nibbleList_1 = intMap_0.values();
            nibbleList_2 = boolMap_0.values();
            nibbleList_3 = enumMap_0.values();
            nibbleList_4 = stringMap_0.values();
            // nibbleList_5 = floatMap_0.values();
            nibbleList_6 = structMap_0.values();

            // `int` as key
            intList_0 = nibbleMap_1.values();
            intList_1 = intMap_1.values();
            intList_2 = boolMap_1.values();
            intList_3 = enumMap_1.values();
            intList_4 = stringMap_1.values();
            // intList_5 = floatMap_1.values();
            intList_6 = structMap_1.values();

            // `bool` as key
            boolList_0 = nibbleMap_2.values();
            boolList_1 = intMap_2.values();
            boolList_2 = boolMap_2.values();
            boolList_3 = enumMap_2.values();
            boolList_4 = stringMap_2.values();
            // boolList_5 = floatMap_2.values();
            boolList_6 = structMap_2.values();

            // `enum` as key
            enumList_0 = nibbleMap_3.values();
            enumList_1 = intMap_3.values();
            enumList_2 = boolMap_3.values();
            enumList_3 = enumMap_3.values();
            enumList_4 = stringMap_3.values();
            // enumList_5 = floatMap_3.values();
            enumList_6 = structMap_3.values();

            // `string` as key
            stringList_0 = nibbleMap_4.values();
            stringList_1 = intMap_4.values();
            stringList_2 = boolMap_4.values();
            stringList_3 = enumMap_4.values();
            stringList_4 = stringMap_4.values();
            // stringList_5 = floatMap_4.values();
            stringList_6 = structMap_4.values();

            // `struct` as key
            structList_0 = nibbleMap_7.values();
            structList_1 = intMap_7.values();
            structList_2 = boolMap_7.values();
            structList_3 = enumMap_7.values();
            structList_4 = stringMap_7.values();
            // structList_5 = floatMap_7.values();
            structList_6 = structMap_7.values();
        }

        // `bit` as key
        int nibbleSize_0 = -1;
        int nibbleSize_1 = -1;
        int nibbleSize_2 = -1;
        int nibbleSize_3 = -1;
        int nibbleSize_4 = -1;
        int nibbleSize_5 = -1;
        int nibbleSize_6 = -1;
        int nibbleSize_7 = -1;

        // `int` as key
        int intSize_0 = -1;
        int intSize_1 = -1;
        int intSize_2 = -1;
        int intSize_3 = -1;
        int intSize_4 = -1;
        int intSize_5 = -1;
        int intSize_6 = -1;
        int intSize_7 = -1;

        // `bool` as key
        int boolSize_0 = -1;
        int boolSize_1 = -1;
        int boolSize_2 = -1;
        int boolSize_3 = -1;
        int boolSize_4 = -1;
        int boolSize_5 = -1;
        int boolSize_6 = -1;
        int boolSize_7 = -1;

        // `enum` as key
        int enumSize_0 = -1;
        int enumSize_1 = -1;
        int enumSize_2 = -1;
        int enumSize_3 = -1;
        int enumSize_4 = -1;
        int enumSize_5 = -1;
        int enumSize_6 = -1;
        int enumSize_7 = -1;

        // `string` as key
        int stringSize_0 = -1;
        int stringSize_1 = -1;
        int stringSize_2 = -1;
        int stringSize_3 = -1;
        int stringSize_4 = -1;
        int stringSize_5 = -1;
        int stringSize_6 = -1;
        int stringSize_7 = -1;

        // `float32` as key
        int floatSize_0 = -1;
        int floatSize_1 = -1;
        int floatSize_2 = -1;
        int floatSize_3 = -1;
        int floatSize_4 = -1;
        int floatSize_5 = -1;
        int floatSize_6 = -1;
        int floatSize_7 = -1;

        // `struct` as key
        int structSize_0 = -1;
        int structSize_1 = -1;
        int structSize_2 = -1;
        int structSize_3 = -1;
        int structSize_4 = -1;
        int structSize_5 = -1;
        int structSize_6 = -1;
        int structSize_7 = -1;
        exec post_solve {
            // `bit` as key
            nibbleSize_0 = nibbleList_0.size();
            nibbleSize_1 = nibbleList_1.size();
            nibbleSize_2 = nibbleList_2.size();
            nibbleSize_3 = nibbleList_3.size();
            nibbleSize_4 = nibbleList_4.size();
            // nibbleSize_5 = nibbleList_5.size();
            nibbleSize_6 = nibbleList_6.size();

            // `int` as key
            intSize_0 = intList_0.size();
            intSize_1 = intList_1.size();
            intSize_2 = intList_2.size();
            intSize_3 = intList_3.size();
            intSize_4 = intList_4.size();
            // intSize_5 = intList_5.size();
            intSize_6 = intList_6.size();

            // `bool` as key
            boolSize_0 = boolList_0.size();
            boolSize_1 = boolList_1.size();
            boolSize_2 = boolList_2.size();
            boolSize_3 = boolList_3.size();
            boolSize_4 = boolList_4.size();
            // boolSize_5 = boolList_5.size();
            boolSize_6 = boolList_6.size();

            // `enum` as key
            enumSize_0 = enumList_0.size();
            enumSize_1 = enumList_1.size();
            enumSize_2 = enumList_2.size();
            enumSize_3 = enumList_3.size();
            enumSize_4 = enumList_4.size();
            // enumSize_5 = enumList_5.size();
            enumSize_6 = enumList_6.size();

            // `string` as key
            stringSize_0 = stringList_0.size();
            stringSize_1 = stringList_1.size();
            stringSize_2 = stringList_2.size();
            stringSize_3 = stringList_3.size();
            stringSize_4 = stringList_4.size();
            // stringSize_5 = stringList_5.size();
            stringSize_6 = stringList_6.size();

            // `struct` as key
            structSize_0 = structList_0.size();
            structSize_1 = structList_1.size();
            structSize_2 = structList_2.size();
            structSize_3 = structList_3.size();
            structSize_4 = structList_4.size();
            // structSize_5 = structList_5.size();
            structSize_6 = structList_6.size();
        }

        exec body ASM =
"""
// test_map_method_values
nibbleMap_0 = {{nibbleSize_0}}
nibbleMap_1 = {{intSize_0}}
nibbleMap_2 = {{boolSize_0}}
nibbleMap_3 = {{enumSize_0}}
nibbleMap_4 = {{stringSize_0}}
nibbleMap_7 = {{structSize_0}}

intMap_0 = {{nibbleSize_1}}
intMap_1 = {{intSize_1}}
intMap_2 = {{boolSize_1}}
intMap_3 = {{enumSize_1}}
intMap_4 = {{stringSize_1}}
intMap_7 = {{structSize_1}}

boolMap_0 = {{nibbleSize_2}}
boolMap_1 = {{intSize_2}}
boolMap_2 = {{boolSize_2}}
boolMap_3 = {{enumSize_2}}
boolMap_4 = {{stringSize_2}}
boolMap_7 = {{structSize_2}}

enumMap_0 = {{nibbleSize_3}}
enumMap_1 = {{intSize_3}}
enumMap_2 = {{boolSize_3}}
enumMap_3 = {{enumSize_3}}
enumMap_4 = {{stringSize_3}}
enumMap_7 = {{structSize_3}}

stringMap_0 = {{nibbleSize_4}}
stringMap_1 = {{intSize_4}}
stringMap_2 = {{boolSize_4}}
stringMap_3 = {{enumSize_4}}
stringMap_4 = {{stringSize_4}}
stringMap_7 = {{structSize_4}}

structMap_0 = {{nibbleSize_6}}
structMap_1 = {{intSize_6}}
structMap_2 = {{boolSize_6}}
structMap_3 = {{enumSize_6}}
structMap_4 = {{stringSize_6}}
structMap_7 = {{structSize_6}}
""";
    }
}

/**@}*/
