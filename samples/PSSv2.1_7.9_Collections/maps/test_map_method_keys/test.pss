/*!
@weakgroup      test
@{
@file
@author         Luther Lee
@data           2023/10/24
@brief          Test map `keys()` method.
@version
Portable Test and Stimulus Standard Version 2.1 <br>
> Section 7.9 : Collections <br>
> Section 7.9.4 : Maps <br>


---------------------------------------------------------------------------------------------------

### Test Command
@code{.unparsed}
make gentarget
@endcode
*/
component pss_top {

    enum eSTR2NUM {
        ZERO, ONE, TWO
    };

    struct sSTR2NUM {
        string stringVal = "NULL";
        int intVal = 0;
    };

    action root_a {
        // `bit` as key
        map<bit [4], bit [4] > nibbleMap_0 = {4'b1110:4'b0011, 4'b0110:4'b0010};
        map<bit [4], int     > nibbleMap_1 = {4'b1110:3      , 4'b0110:2      };
        map<bit [4], bool    > nibbleMap_2;
        map<bit [4], eSTR2NUM> nibbleMap_3;
        map<bit [4], string  > nibbleMap_4 = {4'b1110:"C"    , 4'b0110:"B"    };
        map<bit [4], float32 > nibbleMap_5;
        map<bit [4], float64 > nibbleMap_6;
        map<bit [4], sSTR2NUM> nibbleMap_7;

        // `int` as key
        map<int, bit [4] > intMap_0 = {4:4'b0011, 5:4'b0010};
        map<int, int     > intMap_1 = {4:3      , 5:2      };
        map<int, bool    > intMap_2;
        map<int, eSTR2NUM> intMap_3;
        map<int, string  > intMap_4 = {4:"C"    , 5:"B"    };
        map<int, float32 > intMap_5;
        map<int, float64 > intMap_6;
        map<int, sSTR2NUM> intMap_7;

        // `bool` as key
        map<bool, bit [4] > boolMap_0;
        map<bool, int     > boolMap_1;
        map<bool, bool    > boolMap_2;
        map<bool, eSTR2NUM> boolMap_3;
        map<bool, string  > boolMap_4;
        map<bool, float32 > boolMap_5;
        map<bool, float64 > boolMap_6;
        map<bool, sSTR2NUM> boolMap_7;

        // `enum` as key
        map<eSTR2NUM, bit [4] > enumMap_0;
        map<eSTR2NUM, int     > enumMap_1;
        map<eSTR2NUM, bool    > enumMap_2;
        map<eSTR2NUM, eSTR2NUM> enumMap_3;
        map<eSTR2NUM, string  > enumMap_4;
        map<eSTR2NUM, float32 > enumMap_5;
        map<eSTR2NUM, float64 > enumMap_6;
        map<eSTR2NUM, sSTR2NUM> enumMap_7;

        // `string` as key
        map<string, bit [4] > stringMap_0 = {"c":4'b0011, "b":4'b0010};
        map<string, int     > stringMap_1 = {"c":3      , "b":2      };
        map<string, bool    > stringMap_2;
        map<string, eSTR2NUM> stringMap_3;
        map<string, string  > stringMap_4 = {"c":"C"    , "b":"B"    };
        map<string, float32 > stringMap_5;
        map<string, float64 > stringMap_6;
        map<string, sSTR2NUM> stringMap_7;

        // `float32` as key
        map<float32, bit [4] > floatMap_0;
        map<float32, int     > floatMap_1;
        map<float32, bool    > floatMap_2;
        map<float32, eSTR2NUM> floatMap_3;
        map<float32, string  > floatMap_4;
        map<float32, float32 > floatMap_5;
        map<float32, float64 > floatMap_6;
        map<float32, sSTR2NUM> floatMap_7;

        // `struct` as key
        map<sSTR2NUM, bit [4] > structMap_0;
        map<sSTR2NUM, int     > structMap_1;
        map<sSTR2NUM, bool    > structMap_2;
        map<sSTR2NUM, eSTR2NUM> structMap_3;
        map<sSTR2NUM, string  > structMap_4;
        map<sSTR2NUM, float32 > structMap_5;
        map<sSTR2NUM, float64 > structMap_6;
        map<sSTR2NUM, sSTR2NUM> structMap_7;

        set<bit [4]> nibbleSet_0, nibbleSet_1, nibbleSet_2, nibbleSet_3, nibbleSet_4, nibbleSet_5, nibbleSet_6, nibbleSet_7;
        set<int> intSet_0, intSet_1, intSet_2, intSet_3, intSet_4, intSet_5, intSet_6, intSet_7;
        set<bool> boolSet_0, boolSet_1, boolSet_2, boolSet_3, boolSet_4, boolSet_5, boolSet_6, boolSet_7;
        set<eSTR2NUM> enumSet_0, enumSet_1, enumSet_2, enumSet_3, enumSet_4, enumSet_5, enumSet_6, enumSet_7;
        set<string> stringSet_0, stringSet_1, stringSet_2, stringSet_3, stringSet_4, stringSet_5, stringSet_6, stringSet_7;
        // set<float32> floatSet_0, floatSet_1, floatSet_2, floatSet_3, floatSet_4, floatSet_5, floatSet_6, floatSet_7;
        set<sSTR2NUM> structSet_0, structSet_1, structSet_2, structSet_3, structSet_4, structSet_5, structSet_6, structSet_7;
        exec pre_solve {
            // `bit` as key
            nibbleSet_0 = nibbleMap_0.keys();
            nibbleSet_1 = nibbleMap_1.keys();
            nibbleSet_2 = nibbleMap_2.keys();
            nibbleSet_3 = nibbleMap_3.keys();
            nibbleSet_4 = nibbleMap_4.keys();
            // nibbleSet_5 = nibbleMap_5.keys();
            // nibbleSet_6 = nibbleMap_6.keys();
            nibbleSet_7 = nibbleMap_7.keys();

            // `int` as key
            intSet_0 = intMap_0.keys();
            intSet_1 = intMap_1.keys();
            intSet_2 = intMap_2.keys();
            intSet_3 = intMap_3.keys();
            intSet_4 = intMap_4.keys();
            // intSet_5 = intMap_5.keys();
            // intSet_6 = intMap_6.keys();
            intSet_7 = intMap_7.keys();

            // `bool` as key
            boolSet_0 = boolMap_0.keys();
            boolSet_1 = boolMap_1.keys();
            boolSet_2 = boolMap_2.keys();
            boolSet_3 = boolMap_3.keys();
            boolSet_4 = boolMap_4.keys();
            // boolSet_5 = boolMap_5.keys();
            // boolSet_6 = boolMap_6.keys();
            boolSet_7 = boolMap_7.keys();

            // `enum` as key
            enumSet_0 = enumMap_0.keys();
            enumSet_1 = enumMap_1.keys();
            enumSet_2 = enumMap_2.keys();
            enumSet_3 = enumMap_3.keys();
            enumSet_4 = enumMap_4.keys();
            // enumSet_5 = enumMap_5.keys();
            // enumSet_6 = enumMap_6.keys();
            enumSet_7 = enumMap_7.keys();

            // `string` as key
            stringSet_0 = stringMap_0.keys();
            stringSet_1 = stringMap_1.keys();
            stringSet_2 = stringMap_2.keys();
            stringSet_3 = stringMap_3.keys();
            stringSet_4 = stringMap_4.keys();
            // stringSet_5 = stringMap_5.keys();
            // stringSet_6 = stringMap_6.keys();
            stringSet_7 = stringMap_7.keys();

            // `float32` as key
            // floatSet_0 = floatMap_0.keys();
            // floatSet_1 = floatMap_1.keys();
            // floatSet_2 = floatMap_2.keys();
            // floatSet_3 = floatMap_3.keys();
            // floatSet_4 = floatMap_4.keys();
            // floatSet_5 = floatMap_5.keys();
            // floatSet_6 = floatMap_6.keys();
            // floatSet_7 = floatMap_7.keys();

            // `struct` as key
            structSet_0 = structMap_0.keys();
            structSet_1 = structMap_1.keys();
            structSet_2 = structMap_2.keys();
            structSet_3 = structMap_3.keys();
            structSet_4 = structMap_4.keys();
            // structSet_5 = structMap_5.keys();
            // structSet_6 = structMap_6.keys();
            structSet_7 = structMap_7.keys();
        }

        // `bit` as key
        int nibbleSize_0 = -1;
        int nibbleSize_1 = -1;
        int nibbleSize_2 = -1;
        int nibbleSize_3 = -1;
        int nibbleSize_4 = -1;
        int nibbleSize_5 = -1;
        int nibbleSize_6 = -1;
        int nibbleSize_7 = -1;

        // `int` as key
        int intSize_0 = -1;
        int intSize_1 = -1;
        int intSize_2 = -1;
        int intSize_3 = -1;
        int intSize_4 = -1;
        int intSize_5 = -1;
        int intSize_6 = -1;
        int intSize_7 = -1;

        // `bool` as key
        int boolSize_0 = -1;
        int boolSize_1 = -1;
        int boolSize_2 = -1;
        int boolSize_3 = -1;
        int boolSize_4 = -1;
        int boolSize_5 = -1;
        int boolSize_6 = -1;
        int boolSize_7 = -1;

        // `enum` as key
        int enumSize_0 = -1;
        int enumSize_1 = -1;
        int enumSize_2 = -1;
        int enumSize_3 = -1;
        int enumSize_4 = -1;
        int enumSize_5 = -1;
        int enumSize_6 = -1;
        int enumSize_7 = -1;

        // `string` as key
        int stringSize_0 = -1;
        int stringSize_1 = -1;
        int stringSize_2 = -1;
        int stringSize_3 = -1;
        int stringSize_4 = -1;
        int stringSize_5 = -1;
        int stringSize_6 = -1;
        int stringSize_7 = -1;

        // `float32` as key
        int floatSize_0 = -1;
        int floatSize_1 = -1;
        int floatSize_2 = -1;
        int floatSize_3 = -1;
        int floatSize_4 = -1;
        int floatSize_5 = -1;
        int floatSize_6 = -1;
        int floatSize_7 = -1;

        // `struct` as key
        int structSize_0 = -1;
        int structSize_1 = -1;
        int structSize_2 = -1;
        int structSize_3 = -1;
        int structSize_4 = -1;
        int structSize_5 = -1;
        int structSize_6 = -1;
        int structSize_7 = -1;
        exec post_solve {
            // `bit` as key
            nibbleSize_0 = nibbleSet_0.size();
            nibbleSize_1 = nibbleSet_1.size();
            nibbleSize_2 = nibbleSet_2.size();
            nibbleSize_3 = nibbleSet_3.size();
            nibbleSize_4 = nibbleSet_4.size();
            // nibbleSize_5 = nibbleSet_5.size();
            // nibbleSize_6 = nibbleSet_6.size();
            nibbleSize_7 = nibbleSet_7.size();

            // `int` as key
            intSize_0 = intSet_0.size();
            intSize_1 = intSet_1.size();
            intSize_2 = intSet_2.size();
            intSize_3 = intSet_3.size();
            intSize_4 = intSet_4.size();
            // intSize_5 = intSet_5.size();
            // intSize_6 = intSet_6.size();
            intSize_7 = intSet_7.size();

            // `bool` as key
            boolSize_0 = boolSet_0.size();
            boolSize_1 = boolSet_1.size();
            boolSize_2 = boolSet_2.size();
            boolSize_3 = boolSet_3.size();
            boolSize_4 = boolSet_4.size();
            // boolSize_5 = boolSet_5.size();
            // boolSize_6 = boolSet_6.size();
            boolSize_7 = boolSet_7.size();

            // `enum` as key
            enumSize_0 = enumSet_0.size();
            enumSize_1 = enumSet_1.size();
            enumSize_2 = enumSet_2.size();
            enumSize_3 = enumSet_3.size();
            enumSize_4 = enumSet_4.size();
            // enumSize_5 = enumSet_5.size();
            // enumSize_6 = enumSet_6.size();
            enumSize_7 = enumSet_7.size();

            // `string` as key
            stringSize_0 = stringSet_0.size();
            stringSize_1 = stringSet_1.size();
            stringSize_2 = stringSet_2.size();
            stringSize_3 = stringSet_3.size();
            stringSize_4 = stringSet_4.size();
            // stringSize_5 = stringSet_5.size();
            // stringSize_6 = stringSet_6.size();
            stringSize_7 = stringSet_7.size();

            // `float32` as key
            // floatSize_0 = floatSet_0.size();
            // floatSize_1 = floatSet_1.size();
            // floatSize_2 = floatSet_2.size();
            // floatSize_3 = floatSet_3.size();
            // floatSize_4 = floatSet_4.size();
            // floatSize_5 = floatSet_5.size();
            // floatSize_6 = floatSet_6.size();
            // floatSize_7 = floatSet_7.size();

            // `struct` as key
            structSize_0 = structSet_0.size();
            structSize_1 = structSet_1.size();
            structSize_2 = structSet_2.size();
            structSize_3 = structSet_3.size();
            structSize_4 = structSet_4.size();
            // structSize_5 = structSet_5.size();
            // structSize_6 = structSet_6.size();
            structSize_7 = structSet_7.size();
        }

        exec body ASM =
"""
// test_map_method_keys
nibbleMap_0 = {{nibbleSize_0}}
nibbleMap_1 = {{nibbleSize_1}}
nibbleMap_2 = {{nibbleSize_2}}
nibbleMap_3 = {{nibbleSize_3}}
nibbleMap_4 = {{nibbleSize_4}}
nibbleMap_7 = {{nibbleSize_7}}

intMap_0 = {{intSize_0}}
intMap_1 = {{intSize_1}}
intMap_2 = {{intSize_2}}
intMap_3 = {{intSize_3}}
intMap_4 = {{intSize_4}}
intMap_7 = {{intSize_7}}

boolMap_0 = {{boolSize_0}}
boolMap_1 = {{boolSize_1}}
boolMap_2 = {{boolSize_2}}
boolMap_3 = {{boolSize_3}}
boolMap_4 = {{boolSize_4}}
boolMap_7 = {{boolSize_7}}

enumMap_0 = {{enumSize_0}}
enumMap_1 = {{enumSize_1}}
enumMap_2 = {{enumSize_2}}
enumMap_3 = {{enumSize_3}}
enumMap_4 = {{enumSize_4}}
enumMap_7 = {{enumSize_7}}

stringMap_0 = {{stringSize_0}}
stringMap_1 = {{stringSize_1}}
stringMap_2 = {{stringSize_2}}
stringMap_3 = {{stringSize_3}}
stringMap_4 = {{stringSize_4}}
stringMap_7 = {{stringSize_7}}

structMap_0 = {{structSize_0}}
structMap_1 = {{structSize_1}}
structMap_2 = {{structSize_2}}
structMap_3 = {{structSize_3}}
structMap_4 = {{structSize_4}}
structMap_7 = {{structSize_7}}
""";
    }
}

/**@}*/
