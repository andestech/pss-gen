/*!
@weakgroup      test
@{
@file
@author         Luther Lee
@data           2023/10/25
@brief          Test array `to_list()` method.
@version
Portable Test and Stimulus Standard Version 2.1 <br>
> Section 7.9 : Collections <br>
> Section 7.9.2 : Arrays <br>


---------------------------------------------------------------------------------------------------

### Test Command
@code{.unparsed}
make gentarget
@endcode
*/
component pss_top {

    enum eSTR2NUM {
        ZERO, ONE, TWO
    };

    struct sSTR2NUM {
        string stringVal = "NULL";
        int intVal = 0;
    };

    action root_a {
        array<bit [4] , 2> nibbleArray_0 = {4'b0010, 4'b0010};
        array<int     , 2> intArray_0    = {2, 2};
        array<bool    , 2> boolArray_0   ;
        array<eSTR2NUM, 2> enumArray_0   ;
        array<string  , 2> stringArray_0 = {"A", "A"};
        // array<float32 , 2> float32Array_0;
        // array<float64 , 2> float64Array_0;
        array<sSTR2NUM, 2> structArray_0 ;
        array<array<int, 2>, 2> nestedArray = {{2, 3}, {2, 3}};

        bit [4]  nibbleArray_1  [2] = {4'b0010, 4'b0010};
        int      intArray_1     [2] = {2, 2};
        bool     boolArray_1    [2];
        eSTR2NUM enumArray_1    [2];
        string   stringArray_1  [2] = {"A", "A"};
        // float32  float32Array_1 [2];
        // float64  float64Array_1 [2];
        sSTR2NUM structArray_1  [2];

        list<bit [4] > nibbleList ;
        list<int     > intList    ;
        list<bool    > boolList   ;
        list<eSTR2NUM> enumList   ;
        list<string  > stringList ;
        list<float32 > float32List;
        list<float64 > float64List;
        list<sSTR2NUM> structList ;
        // list<array<int, 2>> nestedList;
        exec pre_solve {
            nibbleList  = nibbleArray_0.to_list() ;
            intList     = intArray_0.to_list()    ;
            // boolList    = boolArray_0.to_list()   ;
            // enumList    = enumArray_0.to_list()   ;
            stringList  = stringArray_0.to_list() ;
            // float32List = float32Array_0.to_list();
            // float64List = float64Array_0.to_list();
            // structList  = structArray_0.to_list() ;
            // nestedList  = nestedArray.to_list()   ;
        }

        int nibbleList_size  = -1;
        int intList_size     = -1;
        int boolList_size    = -1;
        int enumList_size    = -1;
        int stringList_size  = -1;
        int float32List_size = -1;
        int float64List_size = -1;
        int structList_size  = -1;
        // int nestedList_size  = -1;
        exec post_solve {
            nibbleList_size  = nibbleList.size() ;
            intList_size     = intList.size()    ;
            boolList_size    = boolList.size()   ;
            enumList_size    = enumList.size()   ;
            stringList_size  = stringList.size() ;
            float32List_size = float32List.size();
            float64List_size = float64List.size();
            structList_size  = structList.size() ;
            // nestedList_size  = nestedList.size() ;
        }

        exec body ASM =
"""
// test_array_method_to_list
nibbleList_size  = {{nibbleList_size}}
intList_size     = {{intList_size}}
boolList_size    = {{boolList_size}}
enumList_size    = {{enumList_size}}
stringList_size  = {{stringList_size}}
float32List_size = {{float32List_size}}
float64List_size = {{float64List_size}}
structList_size  = {{structList_size}}
""";
    }
}

/**@}*/
